#Importa as librarys
library(lubridate)
library(rmapshaper)
library(sf)
library(geobr)
library(dplyr)
library(tidyverse)

#Diretório
path <- "D:/Documentos/eleicao/shape/"
setwd(path)

#Importa os locais geolocalizados
geocoded_secoes <- read.csv("eleitorado_local_votacao_2020.csv", encoding = "Latin-1", sep = ";") %>% filter(CD_MUNICIPIO == "60011" & DS_ELEICAO == "1º Turno") %>% select(NR_ZONA, NR_LOCAL_VOTACAO, NM_LOCAL_VOTACAO, NM_BAIRRO, NR_LONGITUDE, NR_LATITUDE)
geocoded_secoes$ID = paste0(geocoded_secoes$NR_ZONA, "-", geocoded_secoes$NR_LOCAL_VOTACAO)
geocoded_secoes <- geocoded_secoes %>% select(NM_LOCAL_VOTACAO, NM_BAIRRO, NR_LONGITUDE, NR_LATITUDE, ID) %>% distinct()


#Importa o eleitorado
path <- "D:/Documentos/eleicao/"
setwd(path)

voto <- read.csv("boletim_2020_rj.csv", encoding = "Latin-1", sep = ";")

rio <- voto %>% 
  filter(DS_TIPO_VOTAVEL == "Nominal") %>%
  select(SG_UF, DS_CARGO_PERGUNTA, NR_ZONA, NR_SECAO, NR_LOCAL_VOTACAO, CD_MUNICIPIO, NM_MUNICIPIO, NR_VOTAVEL, NM_VOTAVEL, QT_VOTOS) %>% 
  filter(DS_CARGO_PERGUNTA == "Prefeito") %>%
  filter(NM_MUNICIPIO == "RIO DE JANEIRO")

colnames(rio)[1] <- "UF"
colnames(rio)[2] <- "CARGO"
colnames(rio)[3] <- "NUM_ZONA"
colnames(rio)[4] <- "NUM_SECAO"
colnames(rio)[5] <- "NUM_LOCAL"
colnames(rio)[6] <- "NUM_UE"
colnames(rio)[7] <- "NOME_UE"
colnames(rio)[8] <- "NUM_CAND"
colnames(rio)[9] <- "NOME_CAND"
colnames(rio)[10] <- "QNT_VOTO"

#Cria uma ID para cada Seção eleitoral (ZONA + SEÇÃO)
rio$ID <- paste0(rio$NUM_ZONA, "-", rio$NUM_LOCAL)

#Voto em Área de 
indicador <- rio %>% group_by(ID, NUM_CAND, NOME_CAND) %>% summarise(QNT_VOTO = sum(QNT_VOTO))

rio_voto <- indicador %>% group_by(ID) %>% 
  mutate(TOTAL = sum(QNT_VOTO)) %>%
  ungroup() %>%
  mutate(VV = round((QNT_VOTO/TOTAL*100),2)) %>%
  ungroup() %>%
  group_by(ID) %>%
  mutate(RANK = dense_rank(desc(VV)))

#Juntar com os votos
rio_voto_geo <- inner_join(rio_voto, geocoded_secoes, by = "ID")

#Criar objeto de pontos espaciais com locais únicos:
map_sp <- geobr::read_municipality(code_muni = 3304557, year = 2010, simplified = F)

rio_vencedores <- rio_voto_geo %>% filter(NUM_CAND == "12")

lv_sp <- st_as_sf(rio_vencedores, coords=c('NR_LONGITUDE','NR_LATITUDE'), crs=st_crs(map_sp))

#create boundary box of the undelaying map 
box <- sf::st_bbox(map_sp) %>% st_as_sfc()

#Cria o diagrama de voronoi para as áreas das urnas que estamos fazend
v <- sf::st_voronoi(sf::st_union(lv_sp))

# sepate the colection of geometries
v <- st_collection_extract(v)

# crop with boundaries, as sf
v <- st_crop(v, box) %>% sf::st_as_sf()
v <- sf::st_intersection(sf::st_cast(v), sf::st_union(map_sp))
v$D <- "T"

shape_df <- st_join(v, lv_sp, join = st_contains)

shape_df <- shape_df %>% 
  select(4:13)

colnames(shape_df)[1] <- "I"
colnames(shape_df)[2] <- "ID" 
colnames(shape_df)[3] <- "NUM"
colnames(shape_df)[4] <- "NOME"
colnames(shape_df)[5] <- "VOTOS"
colnames(shape_df)[6] <- "T_VOTOS"
colnames(shape_df)[7] <- "VV"
colnames(shape_df)[8] <- "RANK"
colnames(shape_df)[9] <- "LOCAL"
colnames(shape_df)[10] <- "BAIRRO"

no_axis <- theme(axis.title=element_blank(),
                 axis.text=element_blank(),
                 axis.ticks=element_blank())

ggplot() +
  geom_sf(data = shape_df, 
          aes(fill = VV), 
          color= "NA", 
          size=.000001) + scale_fill_distiller(palette = "OrRd", direction = 1) + no_axis + theme_void()


#Vamos imoportar o shapefile do censo
rj_censo <- geobr::read_census_tract(code_tract = 3304557, year = 2010)

#Vamos descobrir qual é a Área do nosso shapefile
shape_df$area_sc <- as.numeric(st_area(shape_df$cbind.as.data.frame.x..ix.....y.unlist.i.....drop...FALSE..))

#Quais são os polígonos do Censo que estão contidos nessa área
res_lv_circles_2000 <-st_intersection(shape_df, rj_censo)

#Cálcula a área de interseção desses polígonos na cidade
res_lv_circles_2000$area_intersec <- as.numeric(st_area(res_lv_circles_2000))

#Cálcula o percentual de cobertura de cada shapefile
res_lv_circles_2000$area_intersec_p <- res_lv_circles_2000$area_intersec/res_lv_circles_2000$area_sc*100

#Agora é preciso importar as tabelas de população, renda e etc. CAOOOOOOOS!
#Vamos selecionar variáveis de Renda + Idade + Pretos/Pardos + Religião(???)

#Diretório
path <- "D:/Documentos/eleicao/censo/"
setwd(path)

multiplicador <- res_lv_circles_2000 %>% select(ID, code_tract, area_intersec_p)

multiplicador$code_tract <- as.character(multiplicador$code_tract)

#Importa pessoal
basico <- readxl::read_xls("Pessoa03_RJ.xls")
basico <- basico %>% select("Cod_setor", "V001", "V002", "V003", "V004", "V005", "V006", "V007")

#Transforma o cod_setor em chr
basico <- basico %>% mutate_all(funs(as.numeric(str_replace(., "X", "0"))))
basico$Cod_setor <- as.character(basico$Cod_setor)

#Junta
teste <- inner_join(multiplicador, basico, by = c("code_tract" = "Cod_setor"))

#Exclui
teste$cbind.as.data.frame.x..ix.....y.unlist.i.....drop...FALSE.. <- NULL

#Soma da população proprocional de cada vororonoi
populacao <- teste %>% mutate(p_res = ((V001 * area_intersec_p)/100),
                          p_bra = ((V002 * area_intersec_p)/100),
                          p_neg = V003+V005,
                          p_neg = ((p_neg * area_intersec_p)/100)) %>% 
  as.data.frame(.) %>% 
  select(ID, code_tract, area_intersec_p, p_res, p_bra, p_neg)

populacao <- populacao %>%
  group_by(ID) %>% 
  summarise(p_res = sum(p_res),
            p_bra = sum(p_bra),
            p_neg = sum(p_neg))

#População em idade
pessoa <- readxl::read_xls("Pessoa13_RJ.xls")
pessoa <- pessoa %>% mutate_all(funs(as.numeric(str_replace(., "X", "0"))))

pessoa_classe <- pessoa %>% 
  group_by(Cod_setor) %>%
  summarise(idade_16a24 = (V050 +V051 + V051 + V052 + V053  + V054 + V055 + V056 + V057 + V058),
            idade_25a39 = (V059 +V060 + V061 + V062 + V063  + V064 + V065 + V066 + V067 + V068 + V069 +V070 + V071 + V072 + V073),
            idade_40a59 = (V074 +V075 + V076 + V077 + V078  + V079 + V080 + V081 + V082 + V083 + V084 +V085 + V086 + V087 + V088 + V089 + V099 + V091 + V092 + V093),
            idade_60mais = (V094 +V095 + V096 + V097 + V098  + V099 + V100 + V101 + V102 + V103 + V104 +V105 + V106 + V107 + V108 + V109 + V110 + V111 + V112 + V113+ V114 + V115 + V116 +V117 + V118 + V119 + V120 + V121 + V122 + V123 + V124 + V125+ V126 + V127 + V128 +V129 + V130 + V131 + V132 + V133 + V134))

multiplicador$code_tract<- as.character(multiplicador$code_tract)
pessoa_classe$Cod_setor <- as.character(pessoa_classe$Cod_setor)


pessoa_multiplicadora <- inner_join(multiplicador, pessoa_classe, by = c("code_tract" = "Cod_setor"))


pessoa_multiplicadora <- pessoa_multiplicadora %>% 
  group_by(code_tract, ID) %>%
  summarise(idade_16a24 = ((idade_16a24 * area_intersec_p)/100),
            idade_25a39 = ((idade_25a39 * area_intersec_p)/100),
            idade_40a59 = ((idade_40a59 * area_intersec_p)/100),
            idade_60mais = ((idade_60mais * area_intersec_p)/100))

pessoa_multiplicadora <- pessoa_multiplicadora %>%
  group_by(ID) %>% 
  summarise(idade_16a24 = sum(idade_16a24),
            idade_25a39 = sum(idade_25a39),
            idade_40a59 = sum(idade_40a59),
            idade_60mais = sum(idade_60mais))


#População de renda
renda <- readxl::read_xls("Basico_RJ.xls")
renda <- renda %>% select("Cod_setor", "V009")

#Transforma o cod_setor em chr
renda$Cod_setor <- as.character(renda$Cod_setor)

#Junta
renda <- inner_join(multiplicador, renda, by = c("code_tract" = "Cod_setor"))
renda$cbind.as.data.frame.x..ix.....y.unlist.i.....drop...FALSE.. <- NULL
names(renda)

renda <- renda %>% 
  group_by(code_tract, ID) %>%
  mutate(valor_a = (area_intersec_p * V009)) %>%
  ungroup() %>%
  group_by(ID) %>%
  summarise(area_to = sum(area_intersec_p),
            renda = sum(valor_a)) %>%
  mutate(renda_media = renda/area_to)


#População por religião

carac_setor <- inner_join(renda, populacao, by = "ID")
carac_setor <- inner_join(carac_setor, pessoa_multiplicadora, by = "ID")

write.csv(carac_setor, "carac_setor.csv", row.names = FALSE)












t <- st_transform(shape_df, "+proj=longlat +datum=WGS84")
categoria <- unique(shape_df$NOME)

paleta <- colorFactor(palette = "Spectral", levels = categoria)

popup_sb <- paste("Aqui é o local", shape_df$LOCAL, "localizada no bairro", shape_df$BAIRRO,".Aqui quem venceu foi o candidato", shape_df$NOME, "com", shape_df$VV, "% dos votos válidos")

library(leaflet)

leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%
  setView(-43.182365,-22.970722, zoom = 9) %>% 
  addPolygons(data = t , 
              fillColor = ~paleta(shape_df$NOME), 
              fillOpacity = 0.7, 
              weight = 0.2, 
              smoothFactor = 0.2,
              popup = ~popup_sb) %>%
  addLegend(title = "Vencedor", 
            pal = paleta,
            value = shape_df$NOME, 
            position = "bottomright",
            opacity = 0.75)


%>%
  addLegend(values = shape_df$NOME, 
            position = "bottomright", 
            title = "Teste")
